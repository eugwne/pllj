set pllju.on_init = $$ 
function print_result(result)
    print('__________')
    for _, row in ipairs(result) do
        print('|', unpack(row))
    end
    print('----------')
end 
$$;
CREATE EXTENSION pllju;
do $$
assert(__untrusted__)
print("LuaJIT unrestricted")
$$ language pllju;
INFO:  LuaJIT unrestricted
do $$
    ffi = require('ffi')
$$ language pllju;
do $$
    local f = require('pllj.func')
    local fn = f.find_function('quote_nullable(text)')
    print(fn("qwerty"))
    print(fn(nil))
$$ language pllju;
INFO:  'qwerty'
INFO:  NULL
create or replace function pg_temp.get_json() returns jsonb as $$
    select '{"a":5, "b":10}'::jsonb
$$ language sql;
do $$
    local get_json = load_function('pg_temp.get_json()')
    print(get_json())
$$ language pllju;
INFO:  {"a": 5, "b": 10}
create or replace function pg_temp.get_json() returns jsonb as $$
    select '{"a":50, "b":100}'::jsonb
$$ language sql;
do $$
    local get_json = load_function('pg_temp.get_json()')
    print(get_json())
$$ language pllju;
INFO:  {"a": 50, "b": 100}
create or replace function pg_temp.get_json() returns jsonb as $$
    select '{"a":5, "b":10}'::jsonb
$$ language sql;
do $$
    g_json = find_function('pg_temp.get_json()')
    print(g_json())
    print(type(g_json()[-1]))
$$ language pllju;
INFO:  {"a": 5, "b": 10}
INFO:  cdata
create or replace function pg_temp.get_json() returns jsonb as $$
    select '{"a":50, "b":100}'::jsonb
$$ language sql;
CREATE or replace FUNCTION pg_temp.add(integer, integer) RETURNS integer
AS 'select $1 + $2;'
LANGUAGE SQL;
do $$
    local plan = spi.prepare("select * from pg_temp.add($1,$2);", {"integer", "integer"}):save_as('del')
    intptr_counter = ffi.cast("int*", plan[1])
    collectgarbage('collect')
    print('ref_count ' .. intptr_counter[0])
    plan = spi.find_plan('del')
    print('ref_count ' .. intptr_counter[0])
    collectgarbage('collect')
    print('ref_count ' .. intptr_counter[0])
$$ language pllju;
INFO:  ref_count 2
INFO:  ref_count 3
INFO:  ref_count 2
do $$
    collectgarbage('stop')
    local plan = spi.prepare("select * from pg_temp.add($1,$2);", {"integer", "integer"}):save_as('plan pg_temp.add')
    intptr_counter = ffi.cast("int*", plan[1])
$$ language pllju;
do $$
    print('ref_count ' .. intptr_counter[0])
$$ language pllju;
INFO:  ref_count 2
do $$
    local plan = spi.find_plan('plan pg_temp.add')
    local result = plan:exec(4, 7)
    for _, row in ipairs(result) do
      print(unpack(row))
    end
$$ language pllju;
INFO:  11
do $$
    for i = 1, 100000 do
        spi.get_saved_plan_names()
    end
    local plan_names = spi.get_saved_plan_names()
    for _, v in ipairs(plan_names) do
        print(v)
    end
$$ language pllju;
INFO:  del
INFO:  plan pg_temp.add
do $$
    local _, e = pcall(spi.free_plan, 'delete')
    print(string.find(e, "free_plan")~=nil and string.find(e, "not found")~=nil)
    local p = spi.prepare("select 1;")
    _, e = pcall(p.save_as, p, 'del')
    print(string.find(e, "plan")~=nil and string.find(e, "already exists")~=nil)
$$ language pllju;
INFO:  true
INFO:  true
do $$
    print('ref_count ' .. intptr_counter[0])
$$ language pllju;
INFO:  ref_count 3
do $$
    local plan = spi.find_plan('plan pg_temp.add')
    print(plan[1].base.ref_count)
    print('++++++++++++')
    collectgarbage('restart')
    collectgarbage('collect')
    print('-----------')
    spi.free_plan('plan pg_temp.add')
    local result = plan:exec(4, 7)
    print('1 == ' .. plan[1].base.ref_count)
    for _, row in ipairs(result) do
      print(unpack(row))
    end
$$ language pllju;
INFO:  4
INFO:  ++++++++++++
INFO:  -----------
INFO:  1 == 1
INFO:  11
do $$
    local plan = spi.prepare("select * from pg_temp.add($1,$2);", {"integer", "integer"})
    intptr_counter = ffi.cast("int*", plan[1])
    print('ref_count ' .. intptr_counter[0])
    local p2 = plan:save_as('del2')
    print('ref_count ' .. intptr_counter[0])
    spi.free_plan('del2')
    print('ref_count ' .. intptr_counter[0])
    p2 = nil
    collectgarbage('collect')
    print('ref_count ' .. intptr_counter[0])
    plan:exec(4, 7)
    plan = nil
    collectgarbage('collect')
    print('dirty read freed memory, ref_count ' .. intptr_counter[0])

$$ language pllju;
INFO:  ref_count 1
INFO:  ref_count 2
INFO:  ref_count 1
INFO:  ref_count 1
INFO:  dirty read freed memory, ref_count 0
do $$
    g_plan = spi.prepare("select * from pg_temp.add($1,$2);", {"integer", "integer"})
$$ language pllju;
do $$
    local plan = g_plan
    local result = plan:exec(4, 7)
    for _, row in ipairs(result) do
      print(unpack(row))
    end
$$ language pllju;
INFO:  11
do $$
local f = find_function('generate_series(int,int)')
local f1 = f(5,10)
print(f1())
f1 = nil
local f2 = f(2,2)
for r in f2 do
end
local f3 = f(1,10)
f3 = nil
collectgarbage('collect')
$$ language pllju;
INFO:  5
CREATE TABLE sometable ( sid int4, sname text, sdata text);
INSERT INTO sometable VALUES (1, 'uno', 'data');
INSERT INTO sometable VALUES (2, 'dos', 'data');
INSERT INTO sometable VALUES (3, 'tres', 'data');
INSERT INTO sometable VALUES (4, 'quatro', 'data');
INSERT INTO sometable VALUES (5, 'cinco', 'data');
BEGIN;
do $$
    cursor = spi.cursor("select * from sometable")
$$ language pllju;
ROLLBACK;
do $$
    local _, e = pcall(cursor.close, cursor)
    print(string.find(e, "cursor deleted")~=nil)
$$ language pllju;
INFO:  true
BEGIN;
do $$
    cursor = spi.cursor("select * from sometable")
$$ language pllju;
do $$
    cursor:close()
$$ language pllju;
ROLLBACK;
do $$
    cursor = spi.cursor("select * from sometable")
    cursor:close()
    local _, e = pcall(cursor.close, cursor)
    print(string.find(e, "cursor deleted")~=nil)
$$ language pllju;
INFO:  true
do $$
    local cursor = spi.cursor("select * from sometable")
    print_result(cursor:fetch())
    print_result(cursor:fetch())
    print_result(cursor:fetch(-2))
    cursor = nil
    collectgarbage('collect')
    cursor = spi.cursor("select * from sometable")

    print_result(cursor:fetch(4))
    print_result(cursor:fetch(-2))
    print('move')
    cursor:move(1, 'a')
    print_result(cursor:fetch(1))
    cursor:move(1)
    print_result(cursor:fetch(1))
    cursor:move(10)
    print_result(cursor:fetch(1))
    cursor:move(2, 'b')
    print_result(cursor:fetch(1))
    cursor:move(-2)
    print_result(cursor:fetch(1))
    cursor:close()

$$ language pllju;
INFO:  __________
INFO:  | 1 uno data
INFO:  ----------
INFO:  __________
INFO:  | 2 dos data
INFO:  ----------
INFO:  __________
INFO:  | 1 uno data
INFO:  ----------
INFO:  __________
INFO:  | 1 uno data
INFO:  | 2 dos data
INFO:  | 3 tres data
INFO:  | 4 quatro data
INFO:  ----------
INFO:  __________
INFO:  | 3 tres data
INFO:  | 2 dos data
INFO:  ----------
INFO:  move
INFO:  __________
INFO:  | 2 dos data
INFO:  ----------
INFO:  __________
INFO:  | 4 quatro data
INFO:  ----------
INFO:  __________
INFO:  ----------
INFO:  __________
INFO:  | 5 cinco data
INFO:  ----------
INFO:  __________
INFO:  | 4 quatro data
INFO:  ----------
BEGIN;
do $$
    plan = spi.prepare("select * from sometable where sid > $1 ;", {"integer"})
    cursor = plan:cursor(1)
    cursor3 = plan:cursor(3)
    print_result(cursor:fetch(1))
    print_result(cursor3:fetch(1))
    print_result(cursor:fetch(1))
    print_result(cursor3:fetch(1))
$$ language pllju;
INFO:  __________
INFO:  | 2 dos data
INFO:  ----------
INFO:  __________
INFO:  | 4 quatro data
INFO:  ----------
INFO:  __________
INFO:  | 3 tres data
INFO:  ----------
INFO:  __________
INFO:  | 5 cinco data
INFO:  ----------
do $$
    print_result(cursor:fetch(1))
    print_result(cursor3:fetch(1))
$$ language pllju;
INFO:  __________
INFO:  | 4 quatro data
INFO:  ----------
INFO:  __________
INFO:  ----------
ROLLBACK;
do $$
    cursor = plan:cursor(1)
    cursor3 = plan:cursor(3)
    print_result(cursor:fetch(1))
    print_result(cursor3:fetch(1))
    print_result(cursor:fetch(1))
    print_result(cursor3:fetch(1))
$$ language pllju;
INFO:  __________
INFO:  | 2 dos data
INFO:  ----------
INFO:  __________
INFO:  | 4 quatro data
INFO:  ----------
INFO:  __________
INFO:  | 3 tres data
INFO:  ----------
INFO:  __________
INFO:  | 5 cinco data
INFO:  ----------
do $$
    local _, e = pcall(cursor.close, cursor)
    print(string.find(e, "cursor deleted")~=nil)
    _, e = pcall(cursor.close, cursor3)
    print(string.find(e, "cursor deleted")~=nil)
$$ language pllju;
INFO:  true
INFO:  true
do $$
    local m = 0
    for r in spi.rows('select generate_series(1,500000)') do
        assert(r[1] - m == 1)
        m = math.max(r[1], m)
    end
    print(m)
$$ language pllju;
INFO:  500000
do $$
    local plan = spi.prepare("select generate_series($1,$2)", {"int", "int"})
    local m = 0
    for i in plan:rows(1,3) do
        for k in plan:rows(4,6) do
            for l in plan:rows(7,9) do
                print(i[1], k[1], l[1])
            end
        end
    end

$$ language pllju;
INFO:  1 4 7
INFO:  1 4 8
INFO:  1 4 9
INFO:  1 5 7
INFO:  1 5 8
INFO:  1 5 9
INFO:  1 6 7
INFO:  1 6 8
INFO:  1 6 9
INFO:  2 4 7
INFO:  2 4 8
INFO:  2 4 9
INFO:  2 5 7
INFO:  2 5 8
INFO:  2 5 9
INFO:  2 6 7
INFO:  2 6 8
INFO:  2 6 9
INFO:  3 4 7
INFO:  3 4 8
INFO:  3 4 9
INFO:  3 5 7
INFO:  3 5 8
INFO:  3 5 9
INFO:  3 6 7
INFO:  3 6 8
INFO:  3 6 9
do $$
    local cursor = plan:named_cursor("cursor_name", 1)
    local _, e = pcall(plan.named_cursor, plan, "cursor_name", 3)
    print(string.find(e, 'cursor "cursor_name" already exists')~=nil)
    cursor = nil
    collectgarbage("collect")
    collectgarbage("collect")
$$ language pllju;
INFO:  true
BEGIN;
do $$
    plan = spi.prepare("select * from sometable where sid > $1 ;", {"integer"})
    plan:named_cursor("cursor 4", 4)
$$ language pllju;
do $$
    local c = spi.find_cursor("cursor 4")
    print(c)
    print_result(c:fetch(10))
$$ language pllju;
INFO:  cursor 4
INFO:  __________
INFO:  | 5 cinco data
INFO:  ----------
ROLLBACK;
do $$
    local _, e = spi.find_cursor("cursor 4")
    print(string.find(e, "cursor not found")~=nil)
$$ language pllju;
INFO:  true
CREATE or replace FUNCTION pg_temp.get_temp_cursor() RETURNS text AS $$
    plan = spi.prepare("select * from sometable where sid > $1 ;", {"integer"})
    plan:named_cursor("get_temp_cursor", 2)
    return "get_temp_cursor"
$$ LANGUAGE pllju;
do $$
    local curname = spi.execute("select pg_temp.get_temp_cursor()")[1][1]
    local c = spi.find_cursor(curname)
    print(c)
    print_result(c:fetch(10))
$$ language pllju;
INFO:  get_temp_cursor
INFO:  __________
INFO:  | 3 tres data
INFO:  | 4 quatro data
INFO:  | 5 cinco data
INFO:  ----------
do $$
    local curname = spi.execute("select pg_temp.get_temp_cursor()")[1][1]
    collectgarbage('collect')
    local c = spi.find_cursor(curname)
    print(c)
    print_result(c:fetch(10))
$$ language pllju;
INFO:  get_temp_cursor
INFO:  __________
INFO:  | 3 tres data
INFO:  | 4 quatro data
INFO:  | 5 cinco data
INFO:  ----------
BEGIN;
do $$
    plan = spi.prepare("select * from sometable where sid > $1 ;", {"integer"})
    del = plan:named_cursor("del", 4)
$$ language pllju;
ROLLBACK;
do $$
    local _, e = pcall(del.fetch, del, 1)
    print(string.find(e, "cursor deleted")~=nil)
    _, e = pcall(del.move, del, 1)
    print(string.find(e, "cursor deleted")~=nil)
    _, e = pcall(del.close, del)
    print(string.find(e, "cursor deleted")~=nil)
    _, e = spi.find_cursor("del")
    print(string.find(e, "cursor not found")~=nil)
$$ language pllju;
INFO:  true
INFO:  true
INFO:  true
INFO:  true
