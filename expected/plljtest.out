\set ECHO none
do $$
print("Hello LuaJIT FFI")
$$ language pllj;
INFO:  Hello LuaJIT FFI
create table pg_temp.test(txt text);
do $$
local spi = require("pllj.spi")
spi.execute("insert into pg_temp.test(txt) values('qwerty')")
$$ language pllj;
select * from pg_temp.test;
  txt   
--------
 qwerty
(1 row)

do $$
local spi = require("pllj.spi")
local result = spi.execute("select null union all select generate_series(7,9)")
for _, row in ipairs(result) do
	for _, col in ipairs(row) do
		print (tonumber(col))
	end
end
result = spi.execute("select 'test'::text ")
print(result[1][1])
$$ language pllj;
INFO:  nil
INFO:  7
INFO:  8
INFO:  9
INFO:  test
CREATE OR REPLACE FUNCTION pg_temp.echo(val integer)
  RETURNS integer AS
$$
if val < 3 then
	return nil
end
return val * 2
$$  LANGUAGE pllj;
select g, quote_nullable(pg_temp.echo(g)) from generate_series(1,5) as g;
 g | quote_nullable 
---+----------------
 1 | NULL
 2 | NULL
 3 | '6'
 4 | '8'
 5 | '10'
(5 rows)

CREATE OR REPLACE FUNCTION public.sum_values(a integer, b integer, c integer)
  RETURNS integer AS
$$ return a+b+c $$ language pllj;
do $$
local spi = require("pllj.spi")
for i = 5,10 do
local result = spi.execute(string.format ("select sum_values(%s,%s,%s)", i, i*2, i*3))
print(result[1][1])
end
$$ language pllj;
INFO:  30
INFO:  36
INFO:  42
INFO:  48
INFO:  54
INFO:  60
CREATE OR REPLACE FUNCTION public.rec_spi(n integer)
  RETURNS integer AS
$BODY$
local function call_spi(value)
	local spi = require("pllj.spi")
	local result = spi.execute(string.format ("select rec_spi(%s)", value))
	return(result[1][1])
end
  if n < 2 then
    return n
  else
    return call_spi(n - 1)+n
  end
$BODY$ LANGUAGE pllj;
select rec_spi(50);
 rec_spi 
---------
    1275
(1 row)

CREATE FUNCTION get_max(a integer, b integer) RETURNS integer AS $$
  if a == nil then return b end
  if b == nil then return a end
  return a > b and a or b
$$ LANGUAGE pllj;
SELECT quote_nullable(get_max(1,2)), 
quote_nullable(get_max(2,1)), 
quote_nullable(get_max(2,null)), 
quote_nullable(get_max(null, 2)), 
quote_nullable(get_max(null, null));
 quote_nullable | quote_nullable | quote_nullable | quote_nullable | quote_nullable 
----------------+----------------+----------------+----------------+----------------
 '2'            | '2'            | '2'            | '2'            | NULL
(1 row)

CREATE or replace FUNCTION pg_temp.get_temp_val() RETURNS integer AS $$
  return 5
$$ LANGUAGE pllj;
SELECT pg_temp.get_temp_val();
 get_temp_val 
--------------
            5
(1 row)

CREATE or replace FUNCTION pg_temp.get_temp_val() RETURNS integer AS $$
  return 9
$$ LANGUAGE pllj;
SELECT pg_temp.get_temp_val();
 get_temp_val 
--------------
            9
(1 row)

CREATE OR REPLACE FUNCTION validation_error()
  RETURNS integer AS
$BODY$
ret value
$BODY$ LANGUAGE pllj;
ERROR:  [string "local validation_error..."]:4: '=' expected near 'value'
CONTEXT:  local validation_error
validation_error = function ()

ret value

end
return validation_error
CREATE FUNCTION echo_int2(arg int2) RETURNS int2 AS $$ return arg $$ LANGUAGE pllj;
SELECT echo_int2('12345');
 echo_int2 
-----------
     12345
(1 row)

CREATE FUNCTION echo_int4(arg int4) RETURNS int4 AS $$ return arg $$ LANGUAGE pllj;
SELECT echo_int4('1234567890');
 echo_int4  
------------
 1234567890
(1 row)

CREATE FUNCTION echo_int8(arg int8) RETURNS int8 AS $$ return arg $$ LANGUAGE pllj;
SELECT echo_int8('1234567890123456789');
      echo_int8      
---------------------
 1234567890123456768
(1 row)

CREATE FUNCTION echo_text(arg text) RETURNS text AS $$ return arg $$ LANGUAGE pllj;
SELECT echo_text('qwe''qwe');
 echo_text 
-----------
 qwe'qwe
(1 row)

CREATE TABLE table_1
(
   id serial,
   column_1 int8
) ;
CREATE FUNCTION pllj_t1() RETURNS trigger AS $$
  print('trigger call column_1 = '..  tostring(trigger.row.column_1))
  local value = trigger.row.column_1
  if value > 10 then
    trigger.row.column_1 = value * 2
  end
$$ LANGUAGE pllj;
CREATE TRIGGER bi_table_1 BEFORE INSERT OR UPDATE OR DELETE ON table_1
  FOR EACH ROW EXECUTE PROCEDURE pllj_t1();
insert into table_1 (column_1) values(5);
INFO:  trigger call column_1 = 5
insert into table_1 (column_1) values(15);
INFO:  trigger call column_1 = 15
select column_1 from table_1 order by 1;
 column_1 
----------
        5
       30
(2 rows)

